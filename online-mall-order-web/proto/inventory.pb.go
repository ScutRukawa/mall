// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RetCodeInventory int32

const (
	RetCodeInventory_SUCCESS_INVENTORY      RetCodeInventory = 0
	RetCodeInventory_ERROR_INVENTORY        RetCodeInventory = 500
	RetCodeInventory_inventory_insufficient RetCodeInventory = 50001
)

var RetCodeInventory_name = map[int32]string{
	0:     "SUCCESS_INVENTORY",
	500:   "ERROR_INVENTORY",
	50001: "inventory_insufficient",
}

var RetCodeInventory_value = map[string]int32{
	"SUCCESS_INVENTORY":      0,
	"ERROR_INVENTORY":        500,
	"inventory_insufficient": 50001,
}

func (x RetCodeInventory) String() string {
	return proto.EnumName(RetCodeInventory_name, int32(x))
}

func (RetCodeInventory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{0}
}

type GoodsInvInfo struct {
	GoodsId              int32    `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsInvInfo) Reset()         { *m = GoodsInvInfo{} }
func (m *GoodsInvInfo) String() string { return proto.CompactTextString(m) }
func (*GoodsInvInfo) ProtoMessage()    {}
func (*GoodsInvInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{0}
}

func (m *GoodsInvInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoodsInvInfo.Unmarshal(m, b)
}
func (m *GoodsInvInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoodsInvInfo.Marshal(b, m, deterministic)
}
func (m *GoodsInvInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsInvInfo.Merge(m, src)
}
func (m *GoodsInvInfo) XXX_Size() int {
	return xxx_messageInfo_GoodsInvInfo.Size(m)
}
func (m *GoodsInvInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsInvInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsInvInfo proto.InternalMessageInfo

func (m *GoodsInvInfo) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *GoodsInvInfo) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GoodsInvInfoRsp struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsInvInfoRsp) Reset()         { *m = GoodsInvInfoRsp{} }
func (m *GoodsInvInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GoodsInvInfoRsp) ProtoMessage()    {}
func (*GoodsInvInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{1}
}

func (m *GoodsInvInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GoodsInvInfoRsp.Unmarshal(m, b)
}
func (m *GoodsInvInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GoodsInvInfoRsp.Marshal(b, m, deterministic)
}
func (m *GoodsInvInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsInvInfoRsp.Merge(m, src)
}
func (m *GoodsInvInfoRsp) XXX_Size() int {
	return xxx_messageInfo_GoodsInvInfoRsp.Size(m)
}
func (m *GoodsInvInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsInvInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsInvInfoRsp proto.InternalMessageInfo

func (m *GoodsInvInfoRsp) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SellInfo struct {
	GoodsInfo            []*GoodsInvInfo `protobuf:"bytes,1,rep,name=goodsInfo,proto3" json:"goodsInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SellInfo) Reset()         { *m = SellInfo{} }
func (m *SellInfo) String() string { return proto.CompactTextString(m) }
func (*SellInfo) ProtoMessage()    {}
func (*SellInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{2}
}

func (m *SellInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SellInfo.Unmarshal(m, b)
}
func (m *SellInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SellInfo.Marshal(b, m, deterministic)
}
func (m *SellInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellInfo.Merge(m, src)
}
func (m *SellInfo) XXX_Size() int {
	return xxx_messageInfo_SellInfo.Size(m)
}
func (m *SellInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SellInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SellInfo proto.InternalMessageInfo

func (m *SellInfo) GetGoodsInfo() []*GoodsInvInfo {
	if m != nil {
		return m.GoodsInfo
	}
	return nil
}

type ReBackInfo struct {
	OrderId              []int64  `protobuf:"varint,1,rep,packed,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReBackInfo) Reset()         { *m = ReBackInfo{} }
func (m *ReBackInfo) String() string { return proto.CompactTextString(m) }
func (*ReBackInfo) ProtoMessage()    {}
func (*ReBackInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{3}
}

func (m *ReBackInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReBackInfo.Unmarshal(m, b)
}
func (m *ReBackInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReBackInfo.Marshal(b, m, deterministic)
}
func (m *ReBackInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReBackInfo.Merge(m, src)
}
func (m *ReBackInfo) XXX_Size() int {
	return xxx_messageInfo_ReBackInfo.Size(m)
}
func (m *ReBackInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReBackInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReBackInfo proto.InternalMessageInfo

func (m *ReBackInfo) GetOrderId() []int64 {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type SellRsp struct {
	Code                 RetCodeInventory `protobuf:"varint,1,opt,name=code,proto3,enum=RetCodeInventory" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SellRsp) Reset()         { *m = SellRsp{} }
func (m *SellRsp) String() string { return proto.CompactTextString(m) }
func (*SellRsp) ProtoMessage()    {}
func (*SellRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{4}
}

func (m *SellRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SellRsp.Unmarshal(m, b)
}
func (m *SellRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SellRsp.Marshal(b, m, deterministic)
}
func (m *SellRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellRsp.Merge(m, src)
}
func (m *SellRsp) XXX_Size() int {
	return xxx_messageInfo_SellRsp.Size(m)
}
func (m *SellRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SellRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SellRsp proto.InternalMessageInfo

func (m *SellRsp) GetCode() RetCodeInventory {
	if m != nil {
		return m.Code
	}
	return RetCodeInventory_SUCCESS_INVENTORY
}

type CommonRsp struct {
	Code                 RetCodeInventory `protobuf:"varint,1,opt,name=code,proto3,enum=RetCodeInventory" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommonRsp) Reset()         { *m = CommonRsp{} }
func (m *CommonRsp) String() string { return proto.CompactTextString(m) }
func (*CommonRsp) ProtoMessage()    {}
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7173caedb7c6ae96, []int{5}
}

func (m *CommonRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRsp.Unmarshal(m, b)
}
func (m *CommonRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRsp.Marshal(b, m, deterministic)
}
func (m *CommonRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRsp.Merge(m, src)
}
func (m *CommonRsp) XXX_Size() int {
	return xxx_messageInfo_CommonRsp.Size(m)
}
func (m *CommonRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRsp proto.InternalMessageInfo

func (m *CommonRsp) GetCode() RetCodeInventory {
	if m != nil {
		return m.Code
	}
	return RetCodeInventory_SUCCESS_INVENTORY
}

func init() {
	proto.RegisterEnum("RetCodeInventory", RetCodeInventory_name, RetCodeInventory_value)
	proto.RegisterType((*GoodsInvInfo)(nil), "GoodsInvInfo")
	proto.RegisterType((*GoodsInvInfoRsp)(nil), "GoodsInvInfoRsp")
	proto.RegisterType((*SellInfo)(nil), "SellInfo")
	proto.RegisterType((*ReBackInfo)(nil), "ReBackInfo")
	proto.RegisterType((*SellRsp)(nil), "SellRsp")
	proto.RegisterType((*CommonRsp)(nil), "CommonRsp")
}

func init() { proto.RegisterFile("inventory.proto", fileDescriptor_7173caedb7c6ae96) }

var fileDescriptor_7173caedb7c6ae96 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0xb6, 0x66, 0xeb, 0xd6, 0xe3, 0xcf, 0xba, 0xa0, 0x52, 0xa6, 0xe0, 0xe8, 0x50, 0xa6, 0x42,
	0x90, 0x7a, 0x21, 0x78, 0xb9, 0x32, 0x46, 0x6f, 0x36, 0x48, 0x55, 0x50, 0x90, 0xb1, 0xb5, 0xa9,
	0x94, 0x6d, 0xc9, 0xe8, 0xba, 0x81, 0x2f, 0xe0, 0x3b, 0xf8, 0x58, 0xbe, 0x8b, 0x0f, 0x20, 0x8d,
	0xc4, 0x76, 0xc3, 0x0b, 0xaf, 0x92, 0x73, 0xbe, 0x73, 0xbe, 0xef, 0xe4, 0x3b, 0x81, 0x5a, 0xcc,
	0x57, 0x8c, 0xa7, 0x22, 0x79, 0x23, 0xf3, 0x44, 0xa4, 0xc2, 0xbe, 0x83, 0xdd, 0x9e, 0x10, 0xe1,
	0xc2, 0xe3, 0x2b, 0x8f, 0x47, 0x02, 0x5b, 0x50, 0x79, 0x95, 0x71, 0x68, 0x69, 0x4d, 0xad, 0x5d,
	0xa6, 0x2a, 0xc4, 0x26, 0x20, 0xbe, 0x9c, 0x59, 0xdb, 0x32, 0x9b, 0x5d, 0xed, 0x16, 0xd4, 0x8a,
	0xbd, 0x74, 0x31, 0x57, 0x45, 0x5a, 0x5e, 0x74, 0x0b, 0x55, 0x9f, 0x4d, 0xa7, 0x92, 0xfc, 0x0a,
	0x8c, 0x1f, 0x36, 0x1e, 0x09, 0x4b, 0x6b, 0xa2, 0xf6, 0x8e, 0xb3, 0x47, 0xd6, 0x28, 0x72, 0xdc,
	0x3e, 0x07, 0xa0, 0xac, 0x33, 0x0a, 0x26, 0x6a, 0x2e, 0x91, 0x84, 0x2c, 0x91, 0x73, 0xa1, 0x36,
	0xa2, 0x2a, 0xb4, 0xaf, 0xa1, 0x92, 0x09, 0x64, 0xea, 0x67, 0x50, 0x0a, 0x44, 0xc8, 0xa4, 0xfc,
	0xbe, 0x53, 0x27, 0x94, 0xa5, 0xae, 0x08, 0x99, 0xa7, 0xde, 0x4c, 0x25, 0x6c, 0x3b, 0x60, 0xb8,
	0x62, 0x36, 0x13, 0xfc, 0xff, 0x3d, 0x97, 0x2f, 0x60, 0x6e, 0x22, 0xf8, 0x10, 0xea, 0xfe, 0x83,
	0xeb, 0x76, 0x7d, 0x7f, 0xe8, 0xf5, 0x1f, 0xbb, 0xfd, 0xfb, 0x01, 0x7d, 0x32, 0xb7, 0xf0, 0x01,
	0xd4, 0xba, 0x94, 0x0e, 0x68, 0x21, 0xf9, 0x85, 0xf0, 0x09, 0x1c, 0xfd, 0x7a, 0x3f, 0x8c, 0xf9,
	0x62, 0x19, 0x45, 0x71, 0x10, 0x33, 0x9e, 0x9a, 0x9f, 0xef, 0xc8, 0xf9, 0xd0, 0xc0, 0xc8, 0x89,
	0x5b, 0xa0, 0xfb, 0x2c, 0xf5, 0xf8, 0x0a, 0xaf, 0xdb, 0xd3, 0x00, 0x92, 0x0f, 0x7e, 0x01, 0x7a,
	0xef, 0xcf, 0x22, 0x93, 0x6c, 0x6e, 0xe5, 0x18, 0x4a, 0x99, 0x45, 0xd8, 0x20, 0x6a, 0x15, 0x8d,
	0x2a, 0x51, 0xa6, 0x9d, 0x82, 0x4e, 0xd9, 0x78, 0x14, 0x4c, 0x8a, 0x70, 0x41, 0xa8, 0x53, 0x79,
	0x2e, 0xcb, 0xbf, 0x32, 0xd6, 0xe5, 0x71, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x11, 0xfd, 0xda,
	0xb8, 0x45, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	SetInv(ctx context.Context, in *GoodsInvInfo, opts ...grpc.CallOption) (*CommonRsp, error)
	GetInv(ctx context.Context, in *GoodsInvInfo, opts ...grpc.CallOption) (*GoodsInvInfoRsp, error)
	Sell(ctx context.Context, in *SellInfo, opts ...grpc.CallOption) (*SellRsp, error)
	Reback(ctx context.Context, in *SellInfo, opts ...grpc.CallOption) (*CommonRsp, error)
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) SetInv(ctx context.Context, in *GoodsInvInfo, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, "/Inventory/SetInv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetInv(ctx context.Context, in *GoodsInvInfo, opts ...grpc.CallOption) (*GoodsInvInfoRsp, error) {
	out := new(GoodsInvInfoRsp)
	err := c.cc.Invoke(ctx, "/Inventory/GetInv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Sell(ctx context.Context, in *SellInfo, opts ...grpc.CallOption) (*SellRsp, error) {
	out := new(SellRsp)
	err := c.cc.Invoke(ctx, "/Inventory/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) Reback(ctx context.Context, in *SellInfo, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, "/Inventory/Reback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	SetInv(context.Context, *GoodsInvInfo) (*CommonRsp, error)
	GetInv(context.Context, *GoodsInvInfo) (*GoodsInvInfoRsp, error)
	Sell(context.Context, *SellInfo) (*SellRsp, error)
	Reback(context.Context, *SellInfo) (*CommonRsp, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) SetInv(ctx context.Context, req *GoodsInvInfo) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInv not implemented")
}
func (*UnimplementedInventoryServer) GetInv(ctx context.Context, req *GoodsInvInfo) (*GoodsInvInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInv not implemented")
}
func (*UnimplementedInventoryServer) Sell(ctx context.Context, req *SellInfo) (*SellRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (*UnimplementedInventoryServer) Reback(ctx context.Context, req *SellInfo) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reback not implemented")
}

func RegisterInventoryServer(s *grpc.Server, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_SetInv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInvInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetInv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/SetInv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetInv(ctx, req.(*GoodsInvInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetInv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInvInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetInv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/GetInv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetInv(ctx, req.(*GoodsInvInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Sell(ctx, req.(*SellInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_Reback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Reback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/Reback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Reback(ctx, req.(*SellInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInv",
			Handler:    _Inventory_SetInv_Handler,
		},
		{
			MethodName: "GetInv",
			Handler:    _Inventory_GetInv_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _Inventory_Sell_Handler,
		},
		{
			MethodName: "Reback",
			Handler:    _Inventory_Reback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
